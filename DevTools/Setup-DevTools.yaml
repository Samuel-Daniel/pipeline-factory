AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DevOpsAccount:
    Description: DevAccount
    Type:  Number
  DevAccount:
    Description: DevAccount
    Type:  Number
  HomologAccount:
    Description: HomologAccount
    Type:  Number
  ProdAccount:
    Description: ProdAccount
    Type:  Number
  TemplateURL:
    Description: TemplateURL
    Type:  String
    Default: "https://buenoh.s3.amazonaws.com/cfn-templates/"

Resources:

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Used by Assumed Roles in Dev/Hml/Ppr/Prod accounts to Encrypt/Decrypt code
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Ref AWS::StackName
        Statement:
          -
            Sid: Allows admin of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: "*"
          -
            Sid: Allow use of key in another account
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${DevOpsAccount}:root
                - !Sub arn:aws:iam::${DevAccount}:root
                - !Sub arn:aws:iam::${HomologAccount}:root
                - !Sub arn:aws:iam::${ProdAccount}:root
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

  KMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: "alias/kmsalias-key" 
      TargetKeyId: !Ref KMSKey

  BucketArtifact:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${KMSAlias}'
              SSEAlgorithm: 'aws:kms'

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketArtifact
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${BucketArtifact}
              - !Sub arn:aws:s3:::${BucketArtifact}/*
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub arn:aws:iam::${DevAccount}:root
                - !Sub arn:aws:iam::${HomologAccount}:root
                - !Sub arn:aws:iam::${ProdAccount}:root
                - !Sub arn:aws:iam::${DevOpsAccount}:root

  CriaFeaturePipeline:
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "index.lambda_handler"
      Role: 
        Fn::GetAtt: 
          - "LambdaRole"
          - "Arn"
      Runtime: "python3.6"
      Timeout: 25
      Code:
        ZipFile: |
          import boto3
          import os
          def lambda_handler(event, context):
              Region=event['region']
              Account = event['account']
              MicroServiceName = event['detail']['repositoryName']
              Repo = event['detail']['repositoryName'].split('-',1)
              NewBranch = event['detail']['referenceName']
              CommitID = event['detail']['commitId']
              if NewBranch == "master":
                exit()
              client = boto3.client('ssm')
              response = client.get_parameter(
                Name = '/App/%s/%s/TemplateName' %(Repo[0], Repo[1])
              )
              TemplateName = response['Parameter']['Value']
              client = boto3.client('ssm')
              response = client.get_parameter(
                Name = '/Shared/TemplateURL' 
              )
              GetTemplateURL = response['Parameter']['Value']
              client = boto3.client('ssm')
              response = client.get_parameter(
                Name = '/App/%s/%s/Runtime' %(Repo[0], Repo[1])
              )
              Runtime = response['Parameter']['Value']
              cf_client = boto3.client('cloudformation')
              cf_client.create_stack(
                  StackName= "Pipeline-%s-%s" %(Repo[1], NewBranch),
                  TemplateURL='%s%s.yaml' %(GetTemplateURL,TemplateName),
                  Parameters=[
                      {
                          'ParameterKey': 'MicroServiceName',
                          'ParameterValue': Repo[1],
                          'UsePreviousValue': False
                      },
                      {
                          'ParameterKey': 'FeatureName',
                          'ParameterValue': Repo[0],
                          'UsePreviousValue': False
                      },
                      {
                          'ParameterKey': 'Runtime',
                          'ParameterValue': Runtime,
                          'UsePreviousValue': False
                      },
                      {
                          'ParameterKey': 'BranchName',
                          'ParameterValue': NewBranch,
                          'UsePreviousValue': False
                      }
                  ],
                  OnFailure='ROLLBACK',
                  Capabilities=['CAPABILITY_NAMED_IAM']
              )
              
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/job-function/SystemAdministrator
        - arn:aws:iam::aws:policy/AdministratorAccess

  KMSKeyArnParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/Shared/KMSKeyArn"
      Type: "String"
      Value: !GetAtt KMSKey.Arn
      Description: "KMSKeyArn"

  KMSAliasParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/Shared/KMSAlias"
      Type: "String"
      Value: !Ref KMSAlias
      Description: "KMSAlias"

  DevAccountParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/Accounts/Dev"
      Type: "String"
      Value: !Ref DevAccount
      Description: "ID da conta de Desenvolvimento"

  HomologAccountParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/Accounts/Homolog"
      Type: "String"
      Value: !Ref HomologAccount
      Description: "ID da conta de Homolog"

  ProdAccountParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/Accounts/Prod"
      Type: "String"
      Value: !Ref ProdAccount
      Description: "ID da conta de Prod"

  DevOpsAccountParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/Accounts/DevOps"
      Type: "String"
      Value: !Ref DevOpsAccount
      Description: "ID da conta de DevOps"

  TemplateURLParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/Shared/TemplateURL"
      Type: "String"
      Value: !Ref TemplateURL
      Description: "TemplateURL"

  BucketArtifactParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/Shared/BucketArtifact"
      Type: "String"
      Value: !Ref BucketArtifact
      Description: "BucketArtifact"

  CriaFeaturePipelineParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/Shared/CriaFeaturePipeline"
      Type: "String"
      Value: !GetAtt CriaFeaturePipeline.Arn
      Description: "CriaFeaturePipeline"